diff --git a/src/cmake/BundleLibraries.cmake b/src/cmake/BundleLibraries.cmake
index 046a6af10d..b349442562 100644
--- a/src/cmake/BundleLibraries.cmake
+++ b/src/cmake/BundleLibraries.cmake
@@ -66,7 +66,7 @@ function(bundle_libraries output_target)
     endif()
   endforeach()
 
-  add_library(${output_target} SHARED ${all_objects})
+  add_library(${output_target} STATIC ${all_objects})
 
   add_dependencies(${output_target} ${ARGN})
 
diff --git a/src/cmake/DawnCompilerWarningFlags.cmake b/src/cmake/DawnCompilerWarningFlags.cmake
index df3210282f..69b6aeed56 100644
--- a/src/cmake/DawnCompilerWarningFlags.cmake
+++ b/src/cmake/DawnCompilerWarningFlags.cmake
@@ -98,6 +98,6 @@ if (MSVC)
   # and /EHsc is required to be used in combination with it,
   # even if it is already added by the windows GN defaults,
   # we still add it to make every /ZW paired with a /EHsc
-  dawn_add_flag("/ZW:nostdlib" CXX)
-  dawn_add_flag("/EHsc" CXX)
+  # dawn_add_flag("/ZW:nostdlib" CXX)
+  # dawn_add_flag("/EHsc" CXX)
 endif ()
diff --git a/src/cmake/DawnLibrary.cmake b/src/cmake/DawnLibrary.cmake
index 2e7b63ba02..a92e878475 100644
--- a/src/cmake/DawnLibrary.cmake
+++ b/src/cmake/DawnLibrary.cmake
@@ -182,7 +182,7 @@ function(dawn_install_target name)
   # When building in debug mode with MSVC, install PDB files together with binaries
   if (MSVC)
     get_target_property(target_type "${name}" TYPE)
-    if ((target_type STREQUAL "STATIC_LIBRARY") OR (target_type STREQUAL "SHARED_LIBRARY") OR (target_type STREQUAL "EXECUTABLE"))
+    if ((target_type STREQUAL "SHARED_LIBRARY") OR (target_type STREQUAL "EXECUTABLE"))
       install(FILES $<TARGET_PDB_FILE:${name}> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
     endif()
   endif (MSVC)
diff --git a/src/dawn/native/CMakeLists.txt b/src/dawn/native/CMakeLists.txt
index d3128bf764..c0a72146cf 100644
--- a/src/dawn/native/CMakeLists.txt
+++ b/src/dawn/native/CMakeLists.txt
@@ -899,32 +899,40 @@ if (DAWN_BUILD_MONOLITHIC_LIBRARY)
     )
     # Bundle all objects of dawn_native, it's public dependencies and private dependencies.
     include(BundleLibraries)
-    bundle_libraries(webgpu_dawn dawn::dawn_native_objects)
-    add_library(dawn::webgpu_dawn ALIAS webgpu_dawn)
     # Compile backend specific sources along with webgpu_dawn_native_proc sources for export macros to get applied.
-    target_sources(webgpu_dawn
-        PRIVATE
+    add_library(webgpu_dawn_private STATIC 
         ${WEBGPU_DAWN_NATIVE_PROC_GEN_SOURCES}
-        ${dawn_component_srcs}
-    )
+        )
+    target_link_libraries(webgpu_dawn_private PRIVATE dawn_public_config dawn_internal_config
+        dawn_native_public_depends dawn_native_private_depends 
+        ${conditional_private_platform_depends}
+        ${conditional_public_depends} dawn::partition_alloc absl::flat_hash_map)
+
+    bundle_libraries(webgpu_dawn dawn::dawn_native_objects webgpu_dawn_private dawn_native
+        ${dawn_native_public_depends}
+        ${dawn_native_private_depends}
+        )
+    add_library(dawn::webgpu_dawn ALIAS webgpu_dawn)
+    
     target_compile_definitions(webgpu_dawn
         PRIVATE
             "WGPU_IMPLEMENTATION"
             "DAWN_NATIVE_IMPLEMENTATION"
-        PUBLIC
-            "WGPU_SHARED_LIBRARY"
-            "DAWN_NATIVE_SHARED_LIBRARY"
     )
+
     # Apart from dawn_public_config, everything else goes inside PRIVATE, otherwise install rules will complain that they were not exported.
     target_link_libraries(webgpu_dawn
         PUBLIC
             dawn_public_config
         PRIVATE
-            dawn_internal_config
-            ${dawn_native_public_depends}
-            ${dawn_native_private_depends}
             ${conditional_private_platform_depends}
     )
+
+    get_target_property(link_libraries webgpu_dawn LINK_LIBRARIES)
+    message("webgpu_dawn link_libraries = ${link_libraries}")
+    get_target_property(interface_link_libraries webgpu_dawn INTERFACE_LINK_LIBRARIES)
+    message("webgpu_dawn interface_link_libraries = ${INTERFACE_LINK_LIBRARIES}")
+    
     set(webgpu_dawn_public_headers)
     foreach(dawn_target_name IN ITEMS dawn_headers dawncpp_headers dawn_native_objects)
         get_target_property(headers "${dawn_target_name}" INTERFACE_SOURCES)
diff --git a/src/dawn/native/d3d/SwapChainD3D.cpp b/src/dawn/native/d3d/SwapChainD3D.cpp
index eb9a69fe02..9ec0dc1cbd 100644
--- a/src/dawn/native/d3d/SwapChainD3D.cpp
+++ b/src/dawn/native/d3d/SwapChainD3D.cpp
@@ -196,7 +196,7 @@ MaybeError SwapChain::InitializeSwapChainFromScratch() {
     swapChainDesc.SampleDesc.Quality = 0;
     swapChainDesc.BufferUsage = mConfig.usage;
     swapChainDesc.BufferCount = mConfig.bufferCount;
-    swapChainDesc.Scaling = DXGI_SCALING_STRETCH;
+    swapChainDesc.Scaling = DXGI_SCALING_NONE;
     swapChainDesc.SwapEffect = DXGI_SWAP_EFFECT_FLIP_DISCARD;
     swapChainDesc.AlphaMode = DXGI_ALPHA_MODE_IGNORE;
     swapChainDesc.Flags = mConfig.swapChainFlags;
