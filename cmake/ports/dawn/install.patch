diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9e2909323a..e2a43a64b7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -94,11 +94,11 @@ function (install_if_enabled target)
         return()
     endif()
 
-    install(TARGETS ${target}
-        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
-        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
-        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
-    )
+    # install(TARGETS ${target}
+    #     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    #     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    #     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    # )
 
     get_target_property(targetHeaders ${target} INTERFACE_SOURCES)
     if (NOT targetHeaders)
@@ -406,6 +406,14 @@ function(common_compile_options TARGET)
     endif()
   endif(COMPILER_IS_LIKE_GNU)
 
+  if (COMPILER_IS_CLANG_CL)
+    target_compile_options(${TARGET} PRIVATE
+      -Wno-deprecated-builtins
+      -Wno-unknown-warning-option
+      -Wno-switch-default
+    )
+  endif ()
+
   if(MSVC)
       target_compile_options(${TARGET} PUBLIC /utf-8)
   endif()
@@ -596,3 +604,72 @@ if (DAWN_EMIT_COVERAGE)
     COMMENT "Generating tint coverage data"
     VERBATIM)
 endif()
+
+if (NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/null.cpp)
+  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/null.cpp [[
+  #include <webgpu/webgpu.h>
+  #include <webgpu/webgpu_cpp.h>
+  int main() {
+    wgpu::Instance instance = wgpu::CreateInstance(nullptr);
+  }
+  ]])
+endif ()
+
+add_executable(dummy ${CMAKE_CURRENT_BINARY_DIR}/null.cpp)
+target_link_libraries(dummy PUBLIC
+  dawncpp
+  webgpu_dawn
+  absl::raw_hash_set
+)
+
+function (get_dependencies OUTPUT_LIST TARGET)
+  get_target_property(IMPORTED ${TARGET} IMPORTED)
+  list(APPEND VISITED_TARGETS ${TARGET})
+  get_target_property(INTF_LIBS ${TARGET} INTERFACE_LINK_LIBRARIES)
+  get_target_property(LIBS ${TARGET} LINK_LIBRARIES)
+  if (LIBS)
+    list(APPEND LIBS ${INTF_LIBS})
+  else()
+    set(INTF_LIBS ${LIBS})
+  endif()
+  set(LIB_FILES "")
+  if (LIBS)
+    foreach(LIB ${LIBS})
+      string(REPLACE "$<LINK_ONLY:" "" LIB ${LIB})
+      string(REPLACE ">" "" LIB ${LIB})
+      if (TARGET ${LIB})
+        list(FIND VISITED_TARGETS ${LIB} VISITED)
+        if (${VISITED} EQUAL -1)
+          get_dependencies(LINK_LIB_FILES ${LIB})
+          get_target_property(LIB_TYPE ${LIB} TYPE)
+          if (NOT ${LIB_TYPE} STREQUAL "INTERFACE_LIBRARY")
+            get_target_property(LIB_ORIG ${LIB} ALIASED_TARGET)
+            if (NOT LIB_ORIG)
+              set(LIB_ORIG ${LIB})
+            endif ()
+            list(APPEND LIB_FILES ${LIB_ORIG} ${LINK_LIB_FILES})
+          endif ()
+        endif()
+      else()
+      endif()
+    endforeach()
+  endif ()
+  set(VISITED_TARGETS ${VISITED_TARGETS} PARENT_SCOPE)
+  set(${OUTPUT_LIST} ${LIB_FILES} PARENT_SCOPE)
+endfunction()
+
+get_dependencies(LIBS dummy)
+
+list(SORT LIBS CASE INSENSITIVE)
+list(REMOVE_DUPLICATES LIBS)
+set(all_objects "")
+foreach(LIB ${LIBS})
+  list(APPEND LIB_FILES "$<TARGET_FILE_NAME:${LIB}>")
+  get_target_property(LIB_TYPE ${LIB} TYPE)
+  if(${LIB_TYPE} STREQUAL "STATIC_LIBRARY")
+    list(APPEND all_objects $<FILTER:$<TARGET_OBJECTS:${LIB}>,EXCLUDE,Placeholder\.cpp\.o$>)
+  endif()
+endforeach()
+
+add_library(webgpu_dawn_static STATIC ${all_objects})
+install(TARGETS webgpu_dawn_static EXPORT dawn_export)
diff --git a/src/dawn/native/d3d/SwapChainD3D.cpp b/src/dawn/native/d3d/SwapChainD3D.cpp
index 57b8502812..ea5561811a 100644
--- a/src/dawn/native/d3d/SwapChainD3D.cpp
+++ b/src/dawn/native/d3d/SwapChainD3D.cpp
@@ -186,7 +186,7 @@ MaybeError SwapChain::InitializeSwapChainFromScratch() {
     swapChainDesc.SampleDesc.Quality = 0;
     swapChainDesc.BufferUsage = mConfig.usage;
     swapChainDesc.BufferCount = mConfig.bufferCount;
-    swapChainDesc.Scaling = DXGI_SCALING_STRETCH;
+    swapChainDesc.Scaling = DXGI_SCALING_NONE;
     swapChainDesc.SwapEffect = DXGI_SWAP_EFFECT_FLIP_DISCARD;
     swapChainDesc.AlphaMode = DXGI_ALPHA_MODE_IGNORE;
     swapChainDesc.Flags = mConfig.swapChainFlags;
