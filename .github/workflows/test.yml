name: Test

on: [push]

env:
  VCPKG_OVERLAY_TRIPLETS: cmake/triplets
  VCPKG_OVERLAY_PORTS: cmake/ports
  AWS_ACCESS_KEY_ID: ${{ secrets.GHBIN_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.GHBIN_SECRET_KEY }}
  AWS_DEFAULT_REGION: fra1
  AWS_ENDPOINT_URL: https://fra1.digitaloceanspaces.com
  AWS_ENDPOINT_URL_S3: https://fra1.digitaloceanspaces.com
  VCPKG_FEATURE_FLAGS: binarycaching
  VCPKG_BINARY_SOURCES: "clear;x-aws,s3://gh-bin/bincache/,readwrite"

jobs:
  ubuntu-ninja-clang-x86_64:
    runs-on: ubuntu-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-linux
      VCPKG_DEFAULT_HOST_TRIPLET: x64-linux
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install prerequisites
      run: |        
        sudo apt-get update && sudo apt-get install -y ninja-build mesa-vulkan-drivers vulkan-tools wget xorg-dev libgl-dev libgl1-mesa-dev libvulkan-dev autoconf autoconf-archive libxrandr-dev libxinerama-dev libxcursor-dev mesa-common-dev libx11-xcb-dev
        wget -O - https://apt.llvm.org/llvm.sh | sudo bash -s - 19
    - name: Vcpkg
      run: |
        vcpkg install --x-install-root vcpkg_installed --x-feature=icu
    - name: Configure
      run: |
        cmake -GNinja -S . -B build -DVCPKG_MANIFEST_MODE=OFF -DVCPKG_INSTALLED_DIR=vcpkg_installed -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_CXX_COMPILER=clang++-19 -DCMAKE_C_COMPILER=clang-19
    - name: Build
      run: |
        cmake --build build
    - name: Test
      run: |
        WGPU_LONG_TIMEOUT=1 ctest --test-dir build --output-on-failure -E "window_autotests"

  windows-ninja-clang-x86-64:
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows-static-md
      VCPKG_DEFAULT_HOST_TRIPLET: x64-windows-static-md
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install prerequisites
      run: |
        choco install ninja --no-progress -y
    - name: Vcpkg
      run: |
        vcpkg install --x-install-root vcpkg_installed --x-feature=icu
    - name: Configure
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake -GNinja -S . -B build -DVCPKG_MANIFEST_MODE=OFF -DVCPKG_TARGET_TRIPLET=%VCPKG_DEFAULT_TRIPLET% -DVCPKG_INSTALLED_DIR=vcpkg_installed -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_C_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_LINKER="C:/Program Files/LLVM/bin/lld-link.exe"
    - name: Build
      run: |
        cmake --build build
    - name: Test
      run: |
        ctest --test-dir build --output-on-failure

  macos-ninja-clang-arm64:
    runs-on: macos-latest
    env:
      VCPKG_DEFAULT_TRIPLET: arm64-osx
      VCPKG_DEFAULT_HOST_TRIPLET: arm64-osx
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install prerequisites
      run: |
        brew install ninja autoconf automake autoconf-archive
        git clone https://github.com/microsoft/vcpkg "$HOME/vcpkg"
    - name: Vcpkg
      run: |
        export VCPKG_ROOT="$HOME/vcpkg"
        $HOME/vcpkg/bootstrap-vcpkg.sh -disableMetrics
        $HOME/vcpkg/vcpkg install --x-install-root vcpkg_installed --x-feature=icu
    - name: Configure
      run: |
        export VCPKG_ROOT="$HOME/vcpkg"
        cmake -GNinja -S . -B build -DVCPKG_MANIFEST_MODE=OFF -DVCPKG_INSTALLED_DIR=vcpkg_installed -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - name: Build
      run: |
        cmake --build build
    - name: Test
      run: |
        ctest --test-dir build --output-on-failure
