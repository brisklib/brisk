<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <Type Name="tl::expected&lt;*&gt;">
        <Intrinsic Name="has_value" Expression="m_has_val"/>
        <Intrinsic Name="value" Expression="m_val"/>
        <Intrinsic Name="error" Expression="m_unexpect.m_val"/>
        <DisplayString Condition="!has_value()">{error()}</DisplayString>
        <DisplayString Condition="has_value()">{value()}</DisplayString>
        <Expand>
            <Item Condition="has_value()" Name="value">value()</Item>
            <Item Condition="!has_value()" Name="error">error()</Item>
        </Expand>
    </Type>
    <Type Name="llvm::SmallVectorImpl&lt;*&gt;">
        <DisplayString IncludeView ="elt0" Condition="Size == 0"></DisplayString>
        <DisplayString IncludeView ="elt0">{(($T1*)BeginX)[0]}{*this,view(elt1)}</DisplayString>
        <DisplayString IncludeView ="elt1" Condition="Size == 1"></DisplayString>
        <DisplayString IncludeView ="elt1">, {(($T1*)BeginX)[1]}{*this,view(elt2)}</DisplayString>
        <DisplayString IncludeView ="elt2" Condition="Size == 2"></DisplayString>
        <DisplayString IncludeView ="elt2">, {(($T1*)BeginX)[2]}{*this,view(elt3)}</DisplayString>
        <DisplayString IncludeView ="elt3" Condition="Size == 3"></DisplayString>
        <DisplayString IncludeView ="elt3">, {(($T1*)BeginX)[3]}{*this,view(elt4)}</DisplayString>
        <DisplayString IncludeView ="elt4" Condition="Size == 4"></DisplayString>
        <DisplayString IncludeView ="elt4">, /* {Size - 4} more*/ </DisplayString>
        <DisplayString Condition="Size == 0">empty</DisplayString>
        <DisplayString Condition="Size != 0">{{{*this,view(elt0)}}}</DisplayString>
        <DisplayString>Uninitialized</DisplayString>
        <Expand>
            <Item Name="[size]">Size</Item>
            <Item Name="[capacity]">Capacity</Item>
            <ArrayItems>
                <Size>Size</Size>
                <ValuePointer>($T1*)BeginX</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>
    <Type Name="Brisk::Simd&lt;*,*&gt;">
        <DisplayString IncludeView ="elt0" Condition="$T2 == 0"></DisplayString>
        <DisplayString IncludeView ="elt0">{m_data[0]}{*this,view(elt1)}</DisplayString>
        <DisplayString IncludeView ="elt1" Condition="$T2 == 1"></DisplayString>
        <DisplayString IncludeView ="elt1">, {m_data[1]}{*this,view(elt2)}</DisplayString>
        <DisplayString IncludeView ="elt2" Condition="$T2 == 2"></DisplayString>
        <DisplayString IncludeView ="elt2">, {m_data[2]}{*this,view(elt3)}</DisplayString>
        <DisplayString IncludeView ="elt3" Condition="$T2 == 3"></DisplayString>
        <DisplayString IncludeView ="elt3">, {m_data[3]}{*this,view(elt4)}</DisplayString>
        <DisplayString IncludeView ="elt4" Condition="$T2 == 4"></DisplayString>
        <DisplayString IncludeView ="elt4">, /* {$T2 - 4} more*/ </DisplayString>
        <DisplayString Condition="$T2 != 0">{{{*this,view(elt0)}}}</DisplayString>
        <Expand HideRawView="true">
            <ArrayItems>
                <Size>$T2</Size>
                <ValuePointer>m_data</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>
    <Type Name="Brisk::PointOf&lt;*&gt;">
        <DisplayString>{{{x}, {y}}}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="x">x</Item>
            <Item Name="y">y</Item>
        </Expand>
    </Type>
    <Type Name="Brisk::SizeOf&lt;*&gt;">
        <DisplayString>{{{x}, {y}}}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="x">x</Item>
            <Item Name="y">y</Item>
        </Expand>
    </Type>
    <Type Name="Brisk::RectangleOf&lt;*&gt;">
        <DisplayString>{{{x1}, {y1}, {x2}, {y2}}}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="x1">x1</Item>
            <Item Name="y1">y1</Item>
            <Item Name="x2">x2</Item>
            <Item Name="y2">y2</Item>
            <Item Name="width()">x2-x1</Item>
            <Item Name="height()">y2-y1</Item>
        </Expand>
    </Type>
    <Type Name="Brisk::EdgesOf&lt;*&gt;">
        <DisplayString>{{{x1}, {y1}, {x2}, {y2}}}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="x1">x1</Item>
            <Item Name="y1">y1</Item>
            <Item Name="x2">x2</Item>
            <Item Name="y2">y2</Item>
            <Item Name="horizontal()">x1+x2</Item>
            <Item Name="vertical()">y1+y2</Item>
        </Expand>
    </Type>
    <Type Name="Brisk::CornersOf&lt;*&gt;">
        <DisplayString>{{{x1y1}, {x2y1}, {x1y2}, {x2y2}}}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="x1y1">x1y1</Item>
            <Item Name="x2y1">x2y1</Item>
            <Item Name="x1y2">x1y2</Item>
            <Item Name="x2y2">x2y2</Item>
        </Expand>
    </Type>
    <Type Name="Brisk::ColorOf&lt;*,*&gt;">
        <DisplayString>{{{r}, {g}, {b}, {a}}}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="r">r</Item>
            <Item Name="g">g</Item>
            <Item Name="b">b</Item>
            <Item Name="a">a</Item>
        </Expand>
    </Type>
    <Type Name="Brisk::MatrixOf&lt;*&gt;">
        <DisplayString>{{{a}, {b}, {c}, {d}, {e}, {f}}}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="a">a</Item>
            <Item Name="b">b</Item>
            <Item Name="c">c</Item>
            <Item Name="d">d</Item>
            <Item Name="e">e</Item>
            <Item Name="f">f</Item>
        </Expand>
    </Type>
    <Type Name="Brisk::LengthOf&lt;Brisk::LengthUnit&gt;">
        <Intrinsic Name="value" Expression="((m_packed &gt;&gt; 31) ? -1 : 1) * ((m_packed &amp; 0x7FFFF0) | (1 &lt;&lt; 23)) / (float)(1 &lt;&lt; 23) * (1 &lt;&lt; (((m_packed &gt;&gt; 23) &amp; 0xFF) - 127))"/>
        <DisplayString Condition="m_packed == 0x7fc00000">Undefined</DisplayString>
        <DisplayString Condition="m_packed == 0x7fc00001">Auto</DisplayString>
        <DisplayString Condition="(m_packed &amp; 0xFFFFFFF0) != 0x7fc00000 &amp;&amp; (m_packed &amp; 0xF) == 0">{value()}px</DisplayString>
        <DisplayString Condition="(m_packed &amp; 0xFFFFFFF0) != 0x7fc00000 &amp;&amp; (m_packed &amp; 0xF) == 1">{value()}dpx</DisplayString>
        <DisplayString Condition="(m_packed &amp; 0xFFFFFFF0) != 0x7fc00000 &amp;&amp; (m_packed &amp; 0xF) == 2">{value()}apx</DisplayString>
        <DisplayString Condition="(m_packed &amp; 0xFFFFFFF0) != 0x7fc00000 &amp;&amp; (m_packed &amp; 0xF) == 3">{value()}em</DisplayString>
        <DisplayString Condition="(m_packed &amp; 0xFFFFFFF0) != 0x7fc00000 &amp;&amp; (m_packed &amp; 0xF) == 4">{value()}vw</DisplayString>
        <DisplayString Condition="(m_packed &amp; 0xFFFFFFF0) != 0x7fc00000 &amp;&amp; (m_packed &amp; 0xF) == 5">{value()}vh</DisplayString>
        <DisplayString Condition="(m_packed &amp; 0xFFFFFFF0) != 0x7fc00000 &amp;&amp; (m_packed &amp; 0xF) == 6">{value()}vmin</DisplayString>
        <DisplayString Condition="(m_packed &amp; 0xFFFFFFF0) != 0x7fc00000 &amp;&amp; (m_packed &amp; 0xF) == 7">{value()}vmax</DisplayString>
        <DisplayString Condition="(m_packed &amp; 0xFFFFFFF0) != 0x7fc00000 &amp;&amp; (m_packed &amp; 0xF) == 8">{value()}%</DisplayString>
    </Type>
</AutoVisualizer>
